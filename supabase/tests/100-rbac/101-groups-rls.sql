begin;

select plan(13);

-- Setup: Create users using test helpers
select tests.create_supabase_user('owner1', 'owner1@example.com', NULL, tests.build_meta_from_identifier('owner1'));
select tests.create_supabase_user('member1a', 'member1a@example.com', NULL, tests.build_meta_from_identifier('member1a'));
select tests.create_supabase_user('member1b', 'member1b@example.com', NULL, tests.build_meta_from_identifier('member1b'));
select tests.create_supabase_user('owner2', 'owner2@example.com', NULL, tests.build_meta_from_identifier('owner2'));
select tests.create_supabase_user('member2a', 'member2a@example.com', NULL, tests.build_meta_from_identifier('member2a'));
select tests.create_supabase_user('member2b', 'member2b@example.com', NULL, tests.build_meta_from_identifier('member2b'));
select tests.create_supabase_user('owner3', 'owner3@example.com', NULL, tests.build_meta_from_identifier('owner3'));

-- Insert groups
-- Insert groups (id is UUID and generated by default)
insert into public.groups (group_name, address, phone, created_by) values
    ('Group 1', 'Address 1', '123-456-7890', tests.get_supabase_uid('owner1')),
    ('Group 2', 'Address 2', '123-456-7890', tests.get_supabase_uid('owner2')),
    ('Group 3', 'Address 3', '123-456-7890', tests.get_supabase_uid('owner3'));

-- Insert group members into the actual join table
insert into public.group_users (group_id, user_id, role) values
    ((select id from public.groups where group_name = 'Group 1' limit 1), tests.get_supabase_uid('member1a'), 'member'),
    ((select id from public.groups where group_name = 'Group 1' limit 1), tests.get_supabase_uid('member1b'), 'member'),
    ((select id from public.groups where group_name = 'Group 2' limit 1), tests.get_supabase_uid('member2a'), 'member'),
    ((select id from public.groups where group_name = 'Group 2' limit 1), tests.get_supabase_uid('member2b'), 'member');

-- Mark group 3 as deleted
update public.groups set deleted_at = now(), deleted_by = tests.get_supabase_uid('owner3') where group_name = 'Group 3';

-- 1. ALL USERS CAN SEE GROUP 1 and GROUP 2
select is(
    (select count(*) from public.groups where group_name in ('Group 1','Group 2')),
    2::bigint,
    'All users can see Group 1 and Group 2'
);

-- 2. ONLY GROUP 3 OWNER CAN SEE GROUP 3
select tests.authenticate_as('owner3');
select is(
    (select count(*) from public.groups where group_name = 'Group 3'),
    1::bigint,
    'Group 3 owner can see Group 3'
);

select tests.authenticate_as('owner1');
select is(
    (select count(*) from public.groups where group_name = 'Group 3'),
    0::bigint,
    'Non-owner cannot see Group 3'
);

-- 3. ONLY GROUP 1 OWNER CAN UPDATE GROUP 1
select tests.authenticate_as('owner1');
select lives_ok(
    $$ update public.groups set group_name = 'Group 1 Updated' where id = (select id from public.groups where group_name = 'Group 1' limit 1) $$,
    'Group 1 owner can update Group 1'
);

select tests.authenticate_as('member1a');
select lives_ok(
    $$ update public.groups set group_name = 'Group 1 Fail' where id = (select id from public.groups where created_by = tests.get_supabase_uid('owner1') limit 1) $$,
    'Group 1 member update attempt did not raise exception'
);

-- Verify with service role that the record was not changed
select tests.authenticate_as_service_role();
select is(
    (select group_name from public.groups where created_by = tests.get_supabase_uid('owner1') limit 1),
    'Group 1 Updated',
    'Group 1 was not changed by member update attempt'
);

-- 4. ONLY GROUP 2 OWNER CAN UPDATE GROUP 2
select tests.authenticate_as('owner2');
select lives_ok(
    $$ update public.groups set group_name = 'Group 2 Updated' where id = (select id from public.groups where group_name = 'Group 2' limit 1) $$,
    'Group 2 owner can update Group 2'
);

select tests.authenticate_as('member2a');
select lives_ok(
    $$ update public.groups set group_name = 'Group 2 Fail' where id = (select id from public.groups where created_by = tests.get_supabase_uid('owner2') limit 1) $$,
    'Group 2 member update attempt did not raise exception'
);

-- Verify with service role that the record was not changed
select tests.authenticate_as_service_role();
select is(
    (select group_name from public.groups where created_by = tests.get_supabase_uid('owner2') limit 1),
    'Group 2 Updated',
    'Group 2 was not changed by member update attempt'
);

-- 5. ONLY GROUP 3 OWNER CAN UPDATE GROUP 3
select tests.authenticate_as('owner3');
select lives_ok(
    $$ update public.groups set group_name = 'Group 3 Updated' where id = (select id from public.groups where group_name = 'Group 3' limit 1) $$,
    'Group 3 owner can update Group 3'
);

-- 6. TEST EACH GROUP MEMBER CAN INSERT A NEW GROUP (AND BECOME OWNER)
select tests.authenticate_as('member1a');
select lives_ok(
    format('insert into public.groups (group_name, address, phone, created_by) values (''New Group'', ''Address New'', ''000-000-0000'', ''%s'')', tests.get_supabase_uid('member1a')),
    'Group member can insert new group and become owner'
);

-- 7. NO ONE CAN DELETE A GROUP
select tests.authenticate_as('owner1');
select lives_ok(
    $$ delete from public.groups where id = (select id from public.groups where created_by = tests.get_supabase_uid('owner1') limit 1) $$,
    'Group delete attempt did not raise exception'
);

-- Verify with service role that the record still exists
select tests.authenticate_as_service_role();
select is(
    (select count(*) from public.groups where created_by = tests.get_supabase_uid('owner1')),
    1::bigint,
    'No one could delete the group; record still exists'
);

select * from finish();
rollback;