/*
 * ==========================================
 * |          GENERATED BY SUPAZOD          |
 * ==========================================
 */

import { z } from "zod";
import { type Json } from "./supabase-types";

export const publicGroupRoleSchema = z.union([
  z.literal("owner"),
  z.literal("admin"),
  z.literal("manager"),
  z.literal("collector"),
  z.literal("member"),
]);

export const publicSettingNamesSchema = z.literal("user_default_group_id");

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.string(), z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
);

export const publicGroupInvitesRowSchema = z.object({
  created_at: z.string(),
  created_by: z.string().nullable(),
  expiration_date: z.string().nullable(),
  group_id: z.string(),
  id: z.string(),
  is_accepted: z.boolean(),
  role: publicGroupRoleSchema,
  user_id: z.string(),
});

export const publicGroupInvitesInsertSchema = z.object({
  created_at: z.string().optional(),
  created_by: z.string().optional().nullable(),
  expiration_date: z.string().optional().nullable(),
  group_id: z.string(),
  id: z.string().optional(),
  is_accepted: z.boolean().optional(),
  role: publicGroupRoleSchema,
  user_id: z.string(),
});

export const publicGroupInvitesUpdateSchema = z.object({
  created_at: z.string().optional(),
  created_by: z.string().optional().nullable(),
  expiration_date: z.string().optional().nullable(),
  group_id: z.string().optional(),
  id: z.string().optional(),
  is_accepted: z.boolean().optional(),
  role: publicGroupRoleSchema.optional(),
  user_id: z.string().optional(),
});

export const publicGroupInvitesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("group_invites_group_id_fkey"),
    columns: z.tuple([z.literal("group_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("groups"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicGroupProfilesRowSchema = z.object({
  created_at: z.string(),
  created_by: z.string().nullable(),
  group_id: z.string(),
  id: z.string(),
  is_active: z.boolean(),
  profile_id: z.string(),
  role: publicGroupRoleSchema,
  updated_at: z.string().nullable(),
  updated_by: z.string().nullable(),
});

export const publicGroupProfilesInsertSchema = z.object({
  created_at: z.string().optional(),
  created_by: z.string().optional().nullable(),
  group_id: z.string(),
  id: z.string().optional(),
  is_active: z.boolean().optional(),
  profile_id: z.string(),
  role: publicGroupRoleSchema,
  updated_at: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable(),
});

export const publicGroupProfilesUpdateSchema = z.object({
  created_at: z.string().optional(),
  created_by: z.string().optional().nullable(),
  group_id: z.string().optional(),
  id: z.string().optional(),
  is_active: z.boolean().optional(),
  profile_id: z.string().optional(),
  role: publicGroupRoleSchema.optional(),
  updated_at: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable(),
});

export const publicGroupProfilesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("group_profiles_group_id_fkey"),
    columns: z.tuple([z.literal("group_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("groups"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("group_profiles_profile_id_fkey"),
    columns: z.tuple([z.literal("profile_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicGroupsRowSchema = z.object({
  address: z.string(),
  created_at: z.string(),
  created_by: z.string().nullable(),
  deleted_at: z.string().nullable(),
  deleted_by: z.string().nullable(),
  fax: z.string().nullable(),
  group_name: z.string(),
  id: z.string(),
  logo_url: z.string().nullable(),
  phone: z.string(),
  short_name: z.string(),
  updated_at: z.string().nullable(),
  updated_by: z.string().nullable(),
  website_url: z.string().nullable(),
});

export const publicGroupsInsertSchema = z.object({
  address: z.string(),
  created_at: z.string().optional(),
  created_by: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  deleted_by: z.string().optional().nullable(),
  fax: z.string().optional().nullable(),
  group_name: z.string(),
  id: z.string().optional(),
  logo_url: z.string().optional().nullable(),
  phone: z.string(),
  short_name: z.string(),
  updated_at: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable(),
  website_url: z.string().optional().nullable(),
});

export const publicGroupsUpdateSchema = z.object({
  address: z.string().optional(),
  created_at: z.string().optional(),
  created_by: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  deleted_by: z.string().optional().nullable(),
  fax: z.string().optional().nullable(),
  group_name: z.string().optional(),
  id: z.string().optional(),
  logo_url: z.string().optional().nullable(),
  phone: z.string().optional(),
  short_name: z.string().optional(),
  updated_at: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable(),
  website_url: z.string().optional().nullable(),
});

export const publicProfilesRowSchema = z.object({
  avatar_url: z.string().nullable(),
  bio: z.string().nullable(),
  created_at: z.string(),
  created_by: z.string().nullable(),
  deleted_at: z.string().nullable(),
  deleted_by: z.string().nullable(),
  first_name: z.string(),
  id: z.string(),
  last_name: z.string(),
  profile_photo_url: z.string().nullable(),
  updated_at: z.string().nullable(),
  updated_by: z.string().nullable(),
  user_id: z.string().nullable(),
});

export const publicProfilesInsertSchema = z.object({
  avatar_url: z.string().optional().nullable(),
  bio: z.string().optional().nullable(),
  created_at: z.string().optional(),
  created_by: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  deleted_by: z.string().optional().nullable(),
  first_name: z.string(),
  id: z.string().optional(),
  last_name: z.string(),
  profile_photo_url: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable(),
  user_id: z.string().optional().nullable(),
});

export const publicProfilesUpdateSchema = z.object({
  avatar_url: z.string().optional().nullable(),
  bio: z.string().optional().nullable(),
  created_at: z.string().optional(),
  created_by: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  deleted_by: z.string().optional().nullable(),
  first_name: z.string().optional(),
  id: z.string().optional(),
  last_name: z.string().optional(),
  profile_photo_url: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
  updated_by: z.string().optional().nullable(),
  user_id: z.string().optional().nullable(),
});

export const publicRegionsRowSchema = z.object({
  created_at: z.string(),
  created_by: z.string().nullable(),
  deleted_at: z.string().nullable(),
  deleted_by: z.string().nullable(),
  geom: z.unknown(),
  group_id: z.string().nullable(),
  id: z.string(),
  parent_id: z.string().nullable(),
  region_name: z.string(),
  updated_at: z.string(),
  updated_by: z.string().nullable(),
});

export const publicRegionsInsertSchema = z.object({
  created_at: z.string().optional(),
  created_by: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  deleted_by: z.string().optional().nullable(),
  geom: z.unknown(),
  group_id: z.string().optional().nullable(),
  id: z.string().optional(),
  parent_id: z.string().optional().nullable(),
  region_name: z.string(),
  updated_at: z.string().optional(),
  updated_by: z.string().optional().nullable(),
});

export const publicRegionsUpdateSchema = z.object({
  created_at: z.string().optional(),
  created_by: z.string().optional().nullable(),
  deleted_at: z.string().optional().nullable(),
  deleted_by: z.string().optional().nullable(),
  geom: z.unknown().optional(),
  group_id: z.string().optional().nullable(),
  id: z.string().optional(),
  parent_id: z.string().optional().nullable(),
  region_name: z.string().optional(),
  updated_at: z.string().optional(),
  updated_by: z.string().optional().nullable(),
});

export const publicRegionsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("regions_group_id_fkey"),
    columns: z.tuple([z.literal("group_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("groups"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("regions_parent_id_fkey"),
    columns: z.tuple([z.literal("parent_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("regions"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicUserSettingsRowSchema = z.object({
  id: z.string(),
  setting_name: publicSettingNamesSchema,
  setting_value: z.string().nullable(),
  user_id: z.string(),
});

export const publicUserSettingsInsertSchema = z.object({
  id: z.string().optional(),
  setting_name: publicSettingNamesSchema,
  setting_value: z.string().optional().nullable(),
  user_id: z.string(),
});

export const publicUserSettingsUpdateSchema = z.object({
  id: z.string().optional(),
  setting_name: publicSettingNamesSchema.optional(),
  setting_value: z.string().optional().nullable(),
  user_id: z.string().optional(),
});

export const publicGetUserProfileIdArgsSchema = z.object({});

export const publicGetUserProfileIdReturnsSchema = z.string();

export const publicIsGroupMateArgsSchema = z.object({
  p_id: z.string(),
  p_type: z.string(),
});

export const publicIsGroupMateReturnsSchema = z.boolean();

export const publicSoftDeleteRecordArgsSchema = z.object({
  p_record_id: z.string(),
  p_table_name: z.string(),
});

export const publicSoftDeleteRecordReturnsSchema = z.undefined();

export const publicUserHasGroupRoleArgsSchema = z.object({
  group_id: z.string(),
  group_role: z.string(),
});

export const publicUserHasGroupRoleReturnsSchema = z.boolean();

export const publicUserIsGroupMemberArgsSchema = z.object({
  group_id: z.string(),
});

export const publicUserIsGroupMemberReturnsSchema = z.boolean();
